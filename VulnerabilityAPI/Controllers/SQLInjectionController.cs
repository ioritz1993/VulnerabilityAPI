using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using System.Data;
using System.Text.RegularExpressions;
using VulnerabilityAPI.Models;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace VulnerabilityAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SQLInjectionController : Controller
    {
        private string _cadena;

        public SQLInjectionController(IConfiguration configuration)
        {
            _cadena = configuration.GetConnectionString("DefaultDatabase");
        }
        public ActionResult<string> Index()
        {
            return Ok("OK");
        }

        // sqlmap -u http://192.168.0.15:5241/api/sqlinjection/secure/Pepe --dump
        [HttpGet, Route("secure/{userLogin}")]
        public ActionResult<List<User>> GetUserSecure(string userLogin)
        {
            List<User> userList = new List<User>();

            using (SqlConnection connection = new SqlConnection(_cadena))
            {
                try
                {
                    connection.Open();

                    using (SqlCommand command = new SqlCommand(null, connection))
                    {
                        command.CommandText = "SELECT * FROM [API_Database].[dbo].[Users] WHERE Login=@Login";
                        SqlParameter userLoginParam = new SqlParameter("Login", SqlDbType.NVarChar, 300);
                        userLoginParam.Value = userLogin;
                        command.Parameters.Add(userLoginParam);
                        command.Prepare();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var user = new User();
                                user.Id = reader.GetInt32(0);
                                user.Login = reader.GetString(1);
                                userList.Add(user);
                            }
                        }
                        return userList;
                    }
                }
                finally
                {
                    connection.Close();
                }
            }
        }

        //https://localhost:7241/api/sqlinjection/insecure/aaa
        //https://localhost:7241/api/sqlinjection/insecure/Pepe
        //https://localhost:7241/api/sqlinjection/insecure/Pepe' OR '1'='1

        //sqlmap -u http://192.168.0.15:5241/api/sqlinjection/insecure/Pepe --dbs 
        //sqlmap -u http://192.168.0.15:5241/api/sqlinjection/insecure/Pepe -D API_Database --tables --dump


        [HttpGet, Route("insecure/{userLogin}")]
        public ActionResult<List<User>> GetUserInsecure(string userLogin)
        {
            List<User> userList = new List<User>();

            using (SqlConnection connection = new SqlConnection(_cadena))
            {
                connection.Open();
                string sql = "SELECT * FROM [API_Database].[dbo].[Users] WHERE Login LIKE "+ "'"+userLogin+"'";
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    try
                    {
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var user = new User();
                                user.Id = reader.GetInt32(0);
                                user.Login = reader.GetString(1);
                                userList.Add(user);
                            }
                            return userList;
                        }
                    } catch (Exception e) { return BadRequest(); }
                }
            }
        }

        //https://localhost:7241/api/sqlinjection/insecureclean/Pepe' OR '1'='1

        // sqlmap -u http://192.168.0.15:5241/api/sqlinjection/insecureclean/Pepe --dump
        [HttpGet, Route("insecureclean/{userLogin}")]
        public ActionResult<List<User>> GetUserWithCleanParameters(string userLogin)
        {

            if (Regex.IsMatch(userLogin, "[^\\w\\.@-]"))
            {
                throw new Exception();
            }

            List<User> userList = new List<User>();

            using (SqlConnection connection = new SqlConnection(_cadena))
            {
                connection.Open();
                string sql = "SELECT * FROM [API_Database].[dbo].[Users] WHERE Login LIKE " + "'" + userLogin + "'";
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    try
                    {
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var user = new User();
                                user.Id = reader.GetInt32(0);
                                user.Login = reader.GetString(1);
                                userList.Add(user);
                            }
                            return userList;
                        }
                    }
                    catch (Exception e) { return BadRequest(); }
                }
            }
        }

    }
}
